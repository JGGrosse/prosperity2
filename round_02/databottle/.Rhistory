path_prices_neg_1 <-"prices_round_2_day_-1.csv"
path_prices_0 <-"prices_round_2_day_0.csv"
path_prices_pos_1 <-"prices_round_2_day_1.csv"
prices_neg_1 <-read.csv(path_prices_neg_1, sep=";")
prices_0 <-read.csv(path_prices_0, sep=";")
prices_pos_1 <-read.csv(path_prices_pos_1, sep=";")
#bind into 2 dfs
prices <- rbind(prices_neg_1, prices_0, prices_pos_1)
View(prices)
View(prices_0)
View(prices)
# Plotting the histogram
hist(prices$humidity, main = "Histogram of Orchid Prices", xlab = "Price", col = "blue", breaks = 20)
# Plotting the histogram
hist(prices$humidity, main = "Histogram of Orchid Prices", xlab = "Humidity", col = "blue", breaks = 20)
hist(prices$humidity, main = "Histogram of Humidity", xlab = "Humidity", col = "blue", breaks = 20)
str(prices)
hist(prices$HUMIDITY, main = "Histogram of Humidity", xlab = "Humidity", col = "blue", breaks = 20)
hist(prices_0$HUMIDITY, main = "Histogram of Humidity", xlab = "Humidity", col = "blue", breaks = 20)
hist(prices_pos_1$HUMIDITY, main = "Histogram of Humidity", xlab = "Humidity", col = "blue", breaks = 20)
hist(prices_neg_1$HUMIDITY, main = "Histogram of Humidity", xlab = "Humidity", col = "blue", breaks = 20)
library(ggplot2)
View(prices)
library(ggplot2)
# Combine into one dataframe
prices <- rbind(prices_neg_1, prices_0, prices_pos_1)
# Plot histograms for each day
p1 <- ggplot(prices, aes(x = HUMIDITY, fill = Day)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
facet_wrap(~ Day, scales = "free_y") +
ggtitle("Histograms of Humidity for Each Day") +
theme_minimal()
# Plot combined histogram
p2 <- ggplot(prices, aes(x = HUMIDITY, fill = Day)) +
geom_histogram(alpha = 0.5, bins = 30, position = "identity") +
ggtitle("Combined Histogram of Humidity") +
theme_minimal()
# Display the plots
print(p1)
print(p2)
library(ggplot2)
# Plot histograms for each day individually
p1 <- ggplot(prices, aes(x = HUMIDITY)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ DAY, scales = "free_y") +
ggtitle("Histograms of Humidity for Each Day") +
xlab("Humidity") +
ylab("Frequency") +
theme_minimal()
# Plot combined histogram
p2 <- ggplot(prices, aes(x = HUMIDITY, fill = as.factor(DAY))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
ggtitle("Combined Histogram of Humidity") +
xlab("Humidity") +
ylab("Frequency") +
scale_fill_manual(values = c("-1" = "red", "0" = "green", "1" = "blue"), name = "Day") +
theme_minimal()
# Display the plots
print(p1)
print(p2)
# Convert DAY to a factor for statistical testing
prices$DAY <- as.factor(prices$DAY)
# Kruskal-Wallis test to compare the three groups
test_result <- kruskal.test(HUMIDITY ~ DAY, data = prices)
# Print the result of the Kruskal-Wallis test
print(test_result)
names(prices)
# List of variables to plot
variables <- c("ORCHIDS", "TRANSPORT_FEES", "EXPORT_TARIFF", "IMPORT_TARIFF", "SUNLIGHT", "HUMIDITY")
# Create plots for each variable
plots <- lapply(variables, function(var) {
ggplot(prices, aes(x = seq_along(get(var)), y = get(var))) +
geom_line() +  # Use geom_line to create line plots
ggtitle(paste("Time Series of", var)) +
xlab("Index") +
ylab(var) +
theme_minimal()
})
# Print all plots
lapply(plots, print)
library(ggplot2)
# Define the variables to plot
variables <- c("ORCHIDS", "TRANSPORT_FEES", "EXPORT_TARIFF", "IMPORT_TARIFF", "SUNLIGHT", "HUMIDITY")
# Loop over each variable and create a histogram
plots <- lapply(variables, function(var) {
ggplot(prices, aes_string(x = var, fill = "factor(DAY)")) +  # aes_string allows using string input for aes
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
ggtitle(paste("Histogram of", var)) +
xlab(var) +
ylab("Frequency") +
scale_fill_manual(values = c("-1" = "red", "0" = "green", "1" = "blue"), name = "Day") +
theme_minimal()
})
# Print all plots
lapply(plots, print)
create_time_series_plot <- function(var) {
ggplot(prices, aes_string(x = "row_number()", y = var, color = "factor(DAY)")) +
geom_line() +  # Use geom_line for time series
ggtitle(paste("Time Series of", var, "by Day")) +
xlab("Observation Index") +
ylab(var) +
scale_color_manual(values = c("-1" = "red", "0" = "green", "1" = "blue"), name = "Day") +
theme_minimal()
}
# Generate and print plots for each variable
plots <- lapply(variables, create_time_series_plot)
lapply(plots, print)
library(ggplot2)
# Define the variables for which to plot time series
variables <- c("ORCHIDS", "TRANSPORT_FEES", "EXPORT_TARIFF", "IMPORT_TARIFF", "SUNLIGHT", "HUMIDITY")
# Function to create a plot for each variable
create_time_series_plot <- function(var) {
ggplot(prices, aes_string(x = "row_number()", y = var, color = "factor(DAY)")) +
geom_line() +  # Use geom_line for time series
ggtitle(paste("Time Series of", var, "by Day")) +
xlab("Observation Index") +
ylab(var) +
scale_color_manual(values = c("-1" = "red", "0" = "green", "1" = "blue"), name = "Day") +
theme_minimal()
}
# Generate and print plots for each variable
plots <- lapply(variables, create_time_series_plot)
lapply(plots, print)
rlang::last_trace()
create_time_series_plot <- function(var) {
ggplot(prices, aes(x = timestamp, y = .data[[var]], color = as.factor(DAY))) +
geom_line() +  # Use geom_line for time series
ggtitle(paste("Time Series of", var, "by Day")) +
xlab("Timestamp") +
ylab(var) +
scale_color_manual(values = c("-1" = "red", "0" = "green", "1" = "blue"), name = "Day") +
theme_minimal()
}
# Generate and print plots for each variable
plots <- lapply(variables, create_time_series_plot)
lapply(plots, print)
View(prices)
library(dplyr)
prices$DAY <- as.factor(prices$DAY)  # Ensure DAY is a factor
results <- lapply(variables, function(var) {
kruskal.test(reformulate("DAY", response = var), data = prices)
})
# Print results
names(results) <- variables
results
kruskal.test(c(prices_0$IMPORT_TARIFF, prices_neg_1$IMPORT_TARIFF))
kruskal.test(prices_0$IMPORT_TARIFF, prices_neg_1$IMPORT_TARIFF)
# Assuming prices$DAY is a factor with levels indicating days
day_minus_one <- prices$HUMIDITY[prices$DAY == "-1"]
day_zero <- prices$HUMIDITY[prices$DAY == "0"]
# Perform the two-sample KS test
ks_test_result <- ks.test(day_minus_one, day_zero)
print(ks_test_result)
# Assuming prices$DAY is a factor with levels indicating days
day_minus_one <- prices$IMPORT_TARIFF[prices$DAY == "-1"]
day_zero <- prices$IMPORT_TARIFF[prices$DAY == "0"]
# Perform the two-sample KS test
ks_test_result <- ks.test(day_minus_one, day_zero)
print(ks_test_result)
path_prices_neg_1 <-"prices_round_2_day_-1.csv"
path_prices_0 <-"prices_round_2_day_0.csv"
path_prices_pos_1 <-"prices_round_2_day_1.csv"
prices_neg_1 <-read.csv(path_prices_neg_1, sep=";")
prices_0 <-read.csv(path_prices_0, sep=";")
prices_pos_1 <-read.csv(path_prices_pos_1, sep=";")
#bind into 1 df
prices <- rbind(prices_neg_1, prices_0, prices_pos_1)
library(ggplot2)
# Define the variables to plot
variables <- c("ORCHIDS", "TRANSPORT_FEES", "EXPORT_TARIFF", "IMPORT_TARIFF", "SUNLIGHT", "HUMIDITY")
# Loop over each variable and create a histogram
plots <- lapply(variables, function(var) {
ggplot(prices, aes_string(x = var, fill = "factor(DAY)")) +  # aes_string allows using string input for aes
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
ggtitle(paste("Histogram of", var)) +
xlab(var) +
ylab("Frequency") +
scale_fill_manual(values = c("-1" = "red", "0" = "green", "1" = "blue"), name = "Day") +
theme_minimal()
})
# Print all plots
lapply(plots, print)
create_time_series_plot <- function(var) {
ggplot(prices, aes(x = timestamp, y = .data[[var]], color = as.factor(DAY))) +
geom_line() +  # Use geom_line for time series
ggtitle(paste("Time Series of", var, "by Day")) +
xlab("Timestamp") +
ylab(var) +
scale_color_manual(values = c("-1" = "red", "0" = "green", "1" = "blue"), name = "Day") +
theme_minimal()
}
# Generate and print plots for each variable
plots <- lapply(variables, create_time_series_plot)
lapply(plots, print)
library(dplyr)
prices$DAY <- as.factor(prices$DAY)  # Ensure DAY is a factor
results <- lapply(variables, function(var) {
kruskal.test(reformulate("DAY", response = var), data = prices)
})
# Print results
names(results) <- variables
results
# Assuming prices$DAY is a factor with levels indicating days
day_minus_one <- prices$IMPORT_TARIFF[prices$DAY == "-1"]
day_zero <- prices$IMPORT_TARIFF[prices$DAY == "0"]
# Perform the two-sample KS test
ks_test_result <- ks.test(day_minus_one, day_zero)
print(ks_test_result)
View(prices)
cor(prices$HUMIDITY, prices$ORCHIDS)
n<-length(prices$HUMIDITY)
cor(prices$HUMIDITY[201:n], prices$ORCHIDS[1:n-200])
cor(prices$HUMIDITY[201:n], prices$ORCHIDS[1:(n-200)])
cor(prices$HUMIDITY[1:(n-200)], prices$ORCHIDS[201:n])
n<-length(prices$HUMIDITY)
orch_fut<-prices$ORCHIDS[201:n]
hum<-prices$HUMIDITY[1:(n-200)]
cor(orch_fut,hum)
# First, filter the data based on the condition for IMPORT_TARIFFS
filtered_indices <- which(prices$IMPORT_TARIFF > -3)
# Adjust filtered indices to account for the shift
valid_indices <- filtered_indices[filtered_indices > 200 & filtered_indices <= (length(prices$HUMIDITY) - 200)]
# Calculate the correlation with the adjusted indices
correlation_result <- cor(
prices$HUMIDITY[valid_indices - 200],  # HUMIDITY shifted forward by 200
prices$ORCHIDS[valid_indices]          # ORCHIDS with normal indices
)
# Output the correlation result
correlation_result
# Filter indices based on the condition for IMPORT_TARIFF
filtered_indices <- which(prices$IMPORT_TARIFF > -3)
# Calculate the correlation using these filtered indices
correlation_result <- cor(
prices$HUMIDITY[filtered_indices],  # HUMIDITY for filtered indices
prices$ORCHIDS[filtered_indices]    # ORCHIDS for the same filtered indices
)
# Output the correlation result
correlation_result
